
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aac  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000bdc  08000bdc  00001bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c14  08000c14  00002030  2**0
                  CONTENTS
  4 .ARM          00000000  08000c14  08000c14  00002030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c14  08000c14  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c14  08000c14  00001c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c18  08000c18  00001c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08000c1c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000030  08000c4c  00002030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000c4c  00002050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f1e  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000598  00000000  00000000  00002f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000738  00000000  00000000  0000350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00003c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  00003d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002161  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000207a  00000000  00000000  00005ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007ea3  00000000  00000000  0000806b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ff0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003cc  00000000  00000000  0000ff54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bc4 	.word	0x08000bc4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	08000bc4 	.word	0x08000bc4

08000170 <clock_init>:
#define SEVEN	0x19
#define EIGHT	0x00
#define NINE	0x10

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	//RCC_ABP2ENR |=RCC_IOPAEN; //Keda 3mlna enable lel clock ely d5lla lel RCC
	RCC_GPIOA_Clk_En();
 8000174:	4b07      	ldr	r3, [pc, #28]	@ (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	@ (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	//Enable clock GPIOB
	//RCC_ABP2ENR |=RCC_IOPBEN;
	RCC_GPIOB_Clk_En();
 8000180:	4b04      	ldr	r3, [pc, #16]	@ (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	@ (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	//	MCAL_GPIO_Init(GPIOA, &PinCfg);

	//GPIOB
	//PB1--> Output push-pull mode
	//GPIOB_CRL |= (1<<4);
	PinCfg.GPIO_Pin_Num = GPIO_Pin_9;
 800019e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	@ (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fc27 	bl	8000a04 <MCAL_GPIO_Init>

	//PB13 --> Output push-pull mode
	//GPIOB_CRH |= (1<<20);
	PinCfg.GPIO_Pin_Num = GPIO_Pin_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	@ (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fc1b 	bl	8000a04 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Num = GPIO_Pin_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	@ (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fc0f 	bl	8000a04 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Num = GPIO_Pin_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	@ (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fc03 	bl	8000a04 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Num = GPIO_Pin_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	@ (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fbf7 	bl	8000a04 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Num = GPIO_Pin_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	@ (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fbeb 	bl	8000a04 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Num = GPIO_Pin_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fbdf 	bl	8000a04 <MCAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <main>:
//		}
//	}
//}

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
	clock_init();
 800025a:	f7ff ff89 	bl	8000170 <clock_init>
	GPIO_init();
 800025e:	f7ff ff9b 	bl	8000198 <GPIO_init>
	LCD_Init();
 8000262:	f000 fa2f 	bl	80006c4 <LCD_Init>

	unsigned char Pressed_Key;

	LCD_Write_String("Younis Tamer");
 8000266:	482a      	ldr	r0, [pc, #168]	@ (8000310 <main+0xbc>)
 8000268:	f000 fae6 	bl	8000838 <LCD_Write_String>
	my_wait(100);
 800026c:	2064      	movs	r0, #100	@ 0x64
 800026e:	f000 f9c3 	bl	80005f8 <my_wait>
	LCD_Clear_Screen();
 8000272:	f000 fa1f 	bl	80006b4 <LCD_Clear_Screen>

	unsigned char seg[] = {ZERO , ONE , TWO , THREE , FOUR , FIVE , SIX , SEVEN , EIGHT , NINE , ZERO};
 8000276:	4a27      	ldr	r2, [pc, #156]	@ (8000314 <main+0xc0>)
 8000278:	f107 0310 	add.w	r3, r7, #16
 800027c:	ca07      	ldmia	r2, {r0, r1, r2}
 800027e:	c303      	stmia	r3!, {r0, r1}
 8000280:	801a      	strh	r2, [r3, #0]
 8000282:	3302      	adds	r3, #2
 8000284:	0c12      	lsrs	r2, r2, #16
 8000286:	701a      	strb	r2, [r3, #0]
	unsigned char lcd[] = {'0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9'};
 8000288:	4a23      	ldr	r2, [pc, #140]	@ (8000318 <main+0xc4>)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	ca07      	ldmia	r2, {r0, r1, r2}
 800028e:	c303      	stmia	r3!, {r0, r1}
 8000290:	801a      	strh	r2, [r3, #0]

	for(unsigned char i = 0 ; i<11 ; i++)
 8000292:	2300      	movs	r3, #0
 8000294:	77fb      	strb	r3, [r7, #31]
 8000296:	e018      	b.n	80002ca <main+0x76>
	{
		MCAL_GPIO_WritePort(GPIOB, seg[i]<<9);
 8000298:	7ffb      	ldrb	r3, [r7, #31]
 800029a:	3320      	adds	r3, #32
 800029c:	443b      	add	r3, r7
 800029e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002a2:	025b      	lsls	r3, r3, #9
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	481c      	ldr	r0, [pc, #112]	@ (800031c <main+0xc8>)
 80002aa:	f000 fc58 	bl	8000b5e <MCAL_GPIO_WritePort>
		LCD_Write_Char(lcd[i]);
 80002ae:	7ffb      	ldrb	r3, [r7, #31]
 80002b0:	3320      	adds	r3, #32
 80002b2:	443b      	add	r3, r7
 80002b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fa9b 	bl	80007f4 <LCD_Write_Char>
		my_wait(100);
 80002be:	2064      	movs	r0, #100	@ 0x64
 80002c0:	f000 f99a 	bl	80005f8 <my_wait>
	for(unsigned char i = 0 ; i<11 ; i++)
 80002c4:	7ffb      	ldrb	r3, [r7, #31]
 80002c6:	3301      	adds	r3, #1
 80002c8:	77fb      	strb	r3, [r7, #31]
 80002ca:	7ffb      	ldrb	r3, [r7, #31]
 80002cc:	2b0a      	cmp	r3, #10
 80002ce:	d9e3      	bls.n	8000298 <main+0x44>
	}
	LCD_Clear_Screen();
 80002d0:	f000 f9f0 	bl	80006b4 <LCD_Clear_Screen>
	Keypad_Init();
 80002d4:	f000 f850 	bl	8000378 <Keypad_Init>
	LCD_Write_String("Keypad is ready");
 80002d8:	4811      	ldr	r0, [pc, #68]	@ (8000320 <main+0xcc>)
 80002da:	f000 faad 	bl	8000838 <LCD_Write_String>
	my_wait(100);
 80002de:	2064      	movs	r0, #100	@ 0x64
 80002e0:	f000 f98a 	bl	80005f8 <my_wait>
	LCD_Clear_Screen();
 80002e4:	f000 f9e6 	bl	80006b4 <LCD_Clear_Screen>

	while(1)
	{

		Pressed_Key = Keypad_GetChar();
 80002e8:	f000 f8bc 	bl	8000464 <Keypad_GetChar>
 80002ec:	4603      	mov	r3, r0
 80002ee:	77bb      	strb	r3, [r7, #30]
		switch(Pressed_Key)
 80002f0:	7fbb      	ldrb	r3, [r7, #30]
 80002f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80002f4:	d002      	beq.n	80002fc <main+0xa8>
 80002f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80002f8:	d008      	beq.n	800030c <main+0xb8>
 80002fa:	e002      	b.n	8000302 <main+0xae>
		{
		case('?') :
					LCD_Clear_Screen();
 80002fc:	f000 f9da 	bl	80006b4 <LCD_Clear_Screen>
		break;
 8000300:	e005      	b.n	800030e <main+0xba>
		case('N') :
					break;
		default :
			LCD_Write_Char(Pressed_Key);
 8000302:	7fbb      	ldrb	r3, [r7, #30]
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fa75 	bl	80007f4 <LCD_Write_Char>
			break;
 800030a:	e000      	b.n	800030e <main+0xba>
					break;
 800030c:	bf00      	nop
		Pressed_Key = Keypad_GetChar();
 800030e:	e7eb      	b.n	80002e8 <main+0x94>
 8000310:	08000bdc 	.word	0x08000bdc
 8000314:	08000bfc 	.word	0x08000bfc
 8000318:	08000c08 	.word	0x08000c08
 800031c:	40010c00 	.word	0x40010c00
 8000320:	08000bec 	.word	0x08000bec

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f000 fc13 	bl	8000b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff7d 	bl	8000254 <main>

0800035a <LoopForever>:

LoopForever:
    b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000368:	08000c1c 	.word	0x08000c1c
  ldr r2, =_sbss
 800036c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000370:	20000050 	.word	0x20000050

08000374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC1_2_IRQHandler>
	...

08000378 <Keypad_Init>:

int Keypad_Rows 	[]	= {R0 , R1 , R2 , R3};
int Keypad_Columns	[]	= {C0 , C1 , C2 , C3};

void Keypad_Init()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	//Setting bits to zeros (Input)
	//	DataDirection_Keypad_Port &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
	//	//Setting buts to ones (Output)
	//	DataDirection_Keypad_Port |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
	PinCnfg.GPIO_Pin_Num = R0;
 800037c:	4b37      	ldr	r3, [pc, #220]	@ (800045c <Keypad_Init+0xe4>)
 800037e:	2201      	movs	r2, #1
 8000380:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000382:	4b36      	ldr	r3, [pc, #216]	@ (800045c <Keypad_Init+0xe4>)
 8000384:	2204      	movs	r2, #4
 8000386:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000388:	4b34      	ldr	r3, [pc, #208]	@ (800045c <Keypad_Init+0xe4>)
 800038a:	2201      	movs	r2, #1
 800038c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 800038e:	4933      	ldr	r1, [pc, #204]	@ (800045c <Keypad_Init+0xe4>)
 8000390:	4833      	ldr	r0, [pc, #204]	@ (8000460 <Keypad_Init+0xe8>)
 8000392:	f000 fb37 	bl	8000a04 <MCAL_GPIO_Init>


	PinCnfg.GPIO_Pin_Num = R1;
 8000396:	4b31      	ldr	r3, [pc, #196]	@ (800045c <Keypad_Init+0xe4>)
 8000398:	2202      	movs	r2, #2
 800039a:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 800039c:	4b2f      	ldr	r3, [pc, #188]	@ (800045c <Keypad_Init+0xe4>)
 800039e:	2204      	movs	r2, #4
 80003a0:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80003a2:	4b2e      	ldr	r3, [pc, #184]	@ (800045c <Keypad_Init+0xe4>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 80003a8:	492c      	ldr	r1, [pc, #176]	@ (800045c <Keypad_Init+0xe4>)
 80003aa:	482d      	ldr	r0, [pc, #180]	@ (8000460 <Keypad_Init+0xe8>)
 80003ac:	f000 fb2a 	bl	8000a04 <MCAL_GPIO_Init>

	PinCnfg.GPIO_Pin_Num = R2;
 80003b0:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <Keypad_Init+0xe4>)
 80003b2:	2208      	movs	r2, #8
 80003b4:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80003b6:	4b29      	ldr	r3, [pc, #164]	@ (800045c <Keypad_Init+0xe4>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80003bc:	4b27      	ldr	r3, [pc, #156]	@ (800045c <Keypad_Init+0xe4>)
 80003be:	2201      	movs	r2, #1
 80003c0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 80003c2:	4926      	ldr	r1, [pc, #152]	@ (800045c <Keypad_Init+0xe4>)
 80003c4:	4826      	ldr	r0, [pc, #152]	@ (8000460 <Keypad_Init+0xe8>)
 80003c6:	f000 fb1d 	bl	8000a04 <MCAL_GPIO_Init>

	PinCnfg.GPIO_Pin_Num = R3;
 80003ca:	4b24      	ldr	r3, [pc, #144]	@ (800045c <Keypad_Init+0xe4>)
 80003cc:	2210      	movs	r2, #16
 80003ce:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80003d0:	4b22      	ldr	r3, [pc, #136]	@ (800045c <Keypad_Init+0xe4>)
 80003d2:	2204      	movs	r2, #4
 80003d4:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80003d6:	4b21      	ldr	r3, [pc, #132]	@ (800045c <Keypad_Init+0xe4>)
 80003d8:	2201      	movs	r2, #1
 80003da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 80003dc:	491f      	ldr	r1, [pc, #124]	@ (800045c <Keypad_Init+0xe4>)
 80003de:	4820      	ldr	r0, [pc, #128]	@ (8000460 <Keypad_Init+0xe8>)
 80003e0:	f000 fb10 	bl	8000a04 <MCAL_GPIO_Init>

	PinCnfg.GPIO_Pin_Num = C0;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <Keypad_Init+0xe4>)
 80003e6:	2220      	movs	r2, #32
 80003e8:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <Keypad_Init+0xe4>)
 80003ec:	2204      	movs	r2, #4
 80003ee:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <Keypad_Init+0xe4>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 80003f6:	4919      	ldr	r1, [pc, #100]	@ (800045c <Keypad_Init+0xe4>)
 80003f8:	4819      	ldr	r0, [pc, #100]	@ (8000460 <Keypad_Init+0xe8>)
 80003fa:	f000 fb03 	bl	8000a04 <MCAL_GPIO_Init>

	PinCnfg.GPIO_Pin_Num = C1;
 80003fe:	4b17      	ldr	r3, [pc, #92]	@ (800045c <Keypad_Init+0xe4>)
 8000400:	2240      	movs	r2, #64	@ 0x40
 8000402:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000404:	4b15      	ldr	r3, [pc, #84]	@ (800045c <Keypad_Init+0xe4>)
 8000406:	2204      	movs	r2, #4
 8000408:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 800040a:	4b14      	ldr	r3, [pc, #80]	@ (800045c <Keypad_Init+0xe4>)
 800040c:	2201      	movs	r2, #1
 800040e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 8000410:	4912      	ldr	r1, [pc, #72]	@ (800045c <Keypad_Init+0xe4>)
 8000412:	4813      	ldr	r0, [pc, #76]	@ (8000460 <Keypad_Init+0xe8>)
 8000414:	f000 faf6 	bl	8000a04 <MCAL_GPIO_Init>

	PinCnfg.GPIO_Pin_Num = C2;
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <Keypad_Init+0xe4>)
 800041a:	2280      	movs	r2, #128	@ 0x80
 800041c:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <Keypad_Init+0xe4>)
 8000420:	2204      	movs	r2, #4
 8000422:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000424:	4b0d      	ldr	r3, [pc, #52]	@ (800045c <Keypad_Init+0xe4>)
 8000426:	2201      	movs	r2, #1
 8000428:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 800042a:	490c      	ldr	r1, [pc, #48]	@ (800045c <Keypad_Init+0xe4>)
 800042c:	480c      	ldr	r0, [pc, #48]	@ (8000460 <Keypad_Init+0xe8>)
 800042e:	f000 fae9 	bl	8000a04 <MCAL_GPIO_Init>

	PinCnfg.GPIO_Pin_Num = C3;
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <Keypad_Init+0xe4>)
 8000434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000438:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 800043a:	4b08      	ldr	r3, [pc, #32]	@ (800045c <Keypad_Init+0xe4>)
 800043c:	2204      	movs	r2, #4
 800043e:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <Keypad_Init+0xe4>)
 8000442:	2201      	movs	r2, #1
 8000444:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(Keypad_Port, &PinCnfg);
 8000446:	4905      	ldr	r1, [pc, #20]	@ (800045c <Keypad_Init+0xe4>)
 8000448:	4805      	ldr	r0, [pc, #20]	@ (8000460 <Keypad_Init+0xe8>)
 800044a:	f000 fadb 	bl	8000a04 <MCAL_GPIO_Init>

	//Settig all port are VCC
	//	Keypad_Port = 0xFF;
	MCAL_GPIO_WritePort(Keypad_Port, 0xFF);
 800044e:	21ff      	movs	r1, #255	@ 0xff
 8000450:	4803      	ldr	r0, [pc, #12]	@ (8000460 <Keypad_Init+0xe8>)
 8000452:	f000 fb84 	bl	8000b5e <MCAL_GPIO_WritePort>
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000004c 	.word	0x2000004c
 8000460:	40010c00 	.word	0x40010c00

08000464 <Keypad_GetChar>:


//Will loop in columns + rows as to see which button is trigerred
char Keypad_GetChar()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	int i,j;

	for(i = 0 ; i < 4 ; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	e0b4      	b.n	80005da <Keypad_GetChar+0x176>
	{
		//Made all Columns are ones-->has volt
		//		Keypad_Port |= ((1<<Keypad_Columns[0]) | (1<<Keypad_Columns[1]) | (1<<Keypad_Columns[2]) | (1<<Keypad_Columns[3]));
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Columns[0] , GPIO_Pin_Set);
 8000470:	4b5e      	ldr	r3, [pc, #376]	@ (80005ec <Keypad_GetChar+0x188>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	b29b      	uxth	r3, r3
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	485d      	ldr	r0, [pc, #372]	@ (80005f0 <Keypad_GetChar+0x18c>)
 800047c:	f000 fb58 	bl	8000b30 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Columns[1] , GPIO_Pin_Set);
 8000480:	4b5a      	ldr	r3, [pc, #360]	@ (80005ec <Keypad_GetChar+0x188>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	b29b      	uxth	r3, r3
 8000486:	2201      	movs	r2, #1
 8000488:	4619      	mov	r1, r3
 800048a:	4859      	ldr	r0, [pc, #356]	@ (80005f0 <Keypad_GetChar+0x18c>)
 800048c:	f000 fb50 	bl	8000b30 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Columns[2] , GPIO_Pin_Set);
 8000490:	4b56      	ldr	r3, [pc, #344]	@ (80005ec <Keypad_GetChar+0x188>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	b29b      	uxth	r3, r3
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	4855      	ldr	r0, [pc, #340]	@ (80005f0 <Keypad_GetChar+0x18c>)
 800049c:	f000 fb48 	bl	8000b30 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Columns[3] , GPIO_Pin_Set);
 80004a0:	4b52      	ldr	r3, [pc, #328]	@ (80005ec <Keypad_GetChar+0x188>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	4851      	ldr	r0, [pc, #324]	@ (80005f0 <Keypad_GetChar+0x18c>)
 80004ac:	f000 fb40 	bl	8000b30 <MCAL_GPIO_WritePin>

		//		Keypad_Port &= ~(1<<Keypad_Columns[i]);
		MCAL_GPIO_WritePin(Keypad_Port, Keypad_Columns[i] , GPIO_Pin_Reset);
 80004b0:	4a4e      	ldr	r2, [pc, #312]	@ (80005ec <Keypad_GetChar+0x188>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	484c      	ldr	r0, [pc, #304]	@ (80005f0 <Keypad_GetChar+0x18c>)
 80004c0:	f000 fb36 	bl	8000b30 <MCAL_GPIO_WritePin>


		//Loop in Rows
		for(j = 0 ; j < 4 ; j++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	e080      	b.n	80005cc <Keypad_GetChar+0x168>
		{
			if(MCAL_GPIO_ReadPin(Keypad_Port, Keypad_Rows[j]) == 0)
 80004ca:	4a4a      	ldr	r2, [pc, #296]	@ (80005f4 <Keypad_GetChar+0x190>)
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	4619      	mov	r1, r3
 80004d6:	4846      	ldr	r0, [pc, #280]	@ (80005f0 <Keypad_GetChar+0x18c>)
 80004d8:	f000 fb13 	bl	8000b02 <MCAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d171      	bne.n	80005c6 <Keypad_GetChar+0x162>
			{
				//It prevents multi-typing
				while(MCAL_GPIO_ReadPin(Keypad_Port, Keypad_Rows[j]) == 0);
 80004e2:	bf00      	nop
 80004e4:	4a43      	ldr	r2, [pc, #268]	@ (80005f4 <Keypad_GetChar+0x190>)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	483f      	ldr	r0, [pc, #252]	@ (80005f0 <Keypad_GetChar+0x18c>)
 80004f2:	f000 fb06 	bl	8000b02 <MCAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f3      	beq.n	80004e4 <Keypad_GetChar+0x80>

				switch(i)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d861      	bhi.n	80005c6 <Keypad_GetChar+0x162>
 8000502:	a201      	add	r2, pc, #4	@ (adr r2, 8000508 <Keypad_GetChar+0xa4>)
 8000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000508:	08000519 	.word	0x08000519
 800050c:	08000541 	.word	0x08000541
 8000510:	08000569 	.word	0x08000569
 8000514:	08000591 	.word	0x08000591
				{
				case(0) :

											if     (j == 0) return '7';
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d101      	bne.n	8000522 <Keypad_GetChar+0xbe>
 800051e:	2337      	movs	r3, #55	@ 0x37
 8000520:	e060      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 1) return '4';
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d101      	bne.n	800052c <Keypad_GetChar+0xc8>
 8000528:	2334      	movs	r3, #52	@ 0x34
 800052a:	e05b      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 2) return '1';
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2b02      	cmp	r3, #2
 8000530:	d101      	bne.n	8000536 <Keypad_GetChar+0xd2>
 8000532:	2331      	movs	r3, #49	@ 0x31
 8000534:	e056      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 3) return '?';//Whatever i want
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d13d      	bne.n	80005b8 <Keypad_GetChar+0x154>
 800053c:	233f      	movs	r3, #63	@ 0x3f
 800053e:	e051      	b.n	80005e4 <Keypad_GetChar+0x180>
				break;

				case(1) :

											if     (j == 0) return '8';
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d101      	bne.n	800054a <Keypad_GetChar+0xe6>
 8000546:	2338      	movs	r3, #56	@ 0x38
 8000548:	e04c      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 1) return '5';
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d101      	bne.n	8000554 <Keypad_GetChar+0xf0>
 8000550:	2335      	movs	r3, #53	@ 0x35
 8000552:	e047      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 2) return '2';
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d101      	bne.n	800055e <Keypad_GetChar+0xfa>
 800055a:	2332      	movs	r3, #50	@ 0x32
 800055c:	e042      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 3) return '0';//Whatever i want
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d12b      	bne.n	80005bc <Keypad_GetChar+0x158>
 8000564:	2330      	movs	r3, #48	@ 0x30
 8000566:	e03d      	b.n	80005e4 <Keypad_GetChar+0x180>
				break;

				case(2) :

											if     (j == 0) return '9';
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d101      	bne.n	8000572 <Keypad_GetChar+0x10e>
 800056e:	2339      	movs	r3, #57	@ 0x39
 8000570:	e038      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 1) return '6';
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d101      	bne.n	800057c <Keypad_GetChar+0x118>
 8000578:	2336      	movs	r3, #54	@ 0x36
 800057a:	e033      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 2) return '3';
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d101      	bne.n	8000586 <Keypad_GetChar+0x122>
 8000582:	2333      	movs	r3, #51	@ 0x33
 8000584:	e02e      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 3) return '=';//Whatever i want
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d119      	bne.n	80005c0 <Keypad_GetChar+0x15c>
 800058c:	233d      	movs	r3, #61	@ 0x3d
 800058e:	e029      	b.n	80005e4 <Keypad_GetChar+0x180>
				break;

				case(3) :

											if     (j == 0) return '/';
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <Keypad_GetChar+0x136>
 8000596:	232f      	movs	r3, #47	@ 0x2f
 8000598:	e024      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 1) return '*';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d101      	bne.n	80005a4 <Keypad_GetChar+0x140>
 80005a0:	232a      	movs	r3, #42	@ 0x2a
 80005a2:	e01f      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 2) return '-';
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d101      	bne.n	80005ae <Keypad_GetChar+0x14a>
 80005aa:	232d      	movs	r3, #45	@ 0x2d
 80005ac:	e01a      	b.n	80005e4 <Keypad_GetChar+0x180>
											else if(j == 3) return '+';//Whatever i want
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d107      	bne.n	80005c4 <Keypad_GetChar+0x160>
 80005b4:	232b      	movs	r3, #43	@ 0x2b
 80005b6:	e015      	b.n	80005e4 <Keypad_GetChar+0x180>
				break;
 80005b8:	bf00      	nop
 80005ba:	e004      	b.n	80005c6 <Keypad_GetChar+0x162>
				break;
 80005bc:	bf00      	nop
 80005be:	e002      	b.n	80005c6 <Keypad_GetChar+0x162>
				break;
 80005c0:	bf00      	nop
 80005c2:	e000      	b.n	80005c6 <Keypad_GetChar+0x162>
				break;
 80005c4:	bf00      	nop
		for(j = 0 ; j < 4 ; j++)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	f77f af7b 	ble.w	80004ca <Keypad_GetChar+0x66>
	for(i = 0 ; i < 4 ; i++)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	f77f af47 	ble.w	8000470 <Keypad_GetChar+0xc>
				}
			}
		}
	}
	return 'N';
 80005e2:	234e      	movs	r3, #78	@ 0x4e
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000010 	.word	0x20000010
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000000 	.word	0x20000000

080005f8 <my_wait>:
extern GPIO_Pin_Config_t PinCnfg;
uint16_t GPIO_Pins_Array[] = {GPIO_Pin_0 , GPIO_Pin_1 , GPIO_Pin_2 , GPIO_Pin_3 , GPIO_Pin_4 , GPIO_Pin_5 , GPIO_Pin_6 , GPIO_Pin_7 };


void my_wait(int x)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0; i<x ; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e00b      	b.n	800061e <my_wait+0x26>
	{
		for(j=0; j<255 ; j++)
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	e002      	b.n	8000612 <my_wait+0x1a>
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	3301      	adds	r3, #1
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	2bfe      	cmp	r3, #254	@ 0xfe
 8000616:	d9f9      	bls.n	800060c <my_wait+0x14>
	for(i=0; i<x ; i++)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	429a      	cmp	r2, r3
 8000624:	d3ef      	bcc.n	8000606 <my_wait+0xe>
		{

		}
	}
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <LCD_En_Kick>:

void LCD_En_Kick()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//	LCD_Ctrl &= ~(1<<EN_Switch);
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_Pin_Set);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <LCD_En_Kick+0x28>)
 8000640:	f000 fa76 	bl	8000b30 <MCAL_GPIO_WritePin>

	my_wait(50);// using Enable Cycle time in Bus timing characteristics in data sheet
 8000644:	2032      	movs	r0, #50	@ 0x32
 8000646:	f7ff ffd7 	bl	80005f8 <my_wait>
	//	LCD_Ctrl |= (1<<EN_Switch);
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_Pin_Reset);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <LCD_En_Kick+0x28>)
 8000652:	f000 fa6d 	bl	8000b30 <MCAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40010800 	.word	0x40010800

08000660 <LCD_GOTO_XY>:

void LCD_GOTO_XY(int line , int position)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	if(line == 1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d10d      	bne.n	800068c <LCD_GOTO_XY+0x2c>
	{
		if(position < 16 && position >= 0)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2b0f      	cmp	r3, #15
 8000674:	dc1a      	bgt.n	80006ac <LCD_GOTO_XY+0x4c>
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db17      	blt.n	80006ac <LCD_GOTO_XY+0x4c>
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW + position);//Ely howa ht7rko be character 0x80+
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	3b80      	subs	r3, #128	@ 0x80
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f893 	bl	80007b0 <LCD_Write_Command>
		if(position < 32 && position >= 0)
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);//Ely howa ht7rko be character 0xC0+
		}
	}
}
 800068a:	e00f      	b.n	80006ac <LCD_GOTO_XY+0x4c>
	else if(line == 2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d10c      	bne.n	80006ac <LCD_GOTO_XY+0x4c>
		if(position < 32 && position >= 0)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b1f      	cmp	r3, #31
 8000696:	dc09      	bgt.n	80006ac <LCD_GOTO_XY+0x4c>
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db06      	blt.n	80006ac <LCD_GOTO_XY+0x4c>
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);//Ely howa ht7rko be character 0xC0+
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	3b40      	subs	r3, #64	@ 0x40
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f882 	bl	80007b0 <LCD_Write_Command>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	LCD_Write_Command(LCD_CLEAR_SCREEN);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 f879 	bl	80007b0 <LCD_Write_Command>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <LCD_Init>:
	//	LCD_Clear_Screen();
}


void LCD_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	my_wait(20);
 80006ca:	2014      	movs	r0, #20
 80006cc:	f7ff ff94 	bl	80005f8 <my_wait>

	//	LCD_Ctrl &= ~((1<<EN_Switch) | (1<<RW_Switch) | (1<<RS_Switch));
	//RS switch
	PinCnfg.GPIO_Pin_Num = RS_Switch;
 80006d0:	4b34      	ldr	r3, [pc, #208]	@ (80007a4 <LCD_Init+0xe0>)
 80006d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006d6:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80006d8:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <LCD_Init+0xe0>)
 80006da:	2204      	movs	r2, #4
 80006dc:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80006de:	4b31      	ldr	r3, [pc, #196]	@ (80007a4 <LCD_Init+0xe0>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinCnfg);
 80006e4:	492f      	ldr	r1, [pc, #188]	@ (80007a4 <LCD_Init+0xe0>)
 80006e6:	4830      	ldr	r0, [pc, #192]	@ (80007a8 <LCD_Init+0xe4>)
 80006e8:	f000 f98c 	bl	8000a04 <MCAL_GPIO_Init>

	//RW switch
	PinCnfg.GPIO_Pin_Num = RW_Switch;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <LCD_Init+0xe0>)
 80006ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f2:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <LCD_Init+0xe0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <LCD_Init+0xe0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinCnfg);
 8000700:	4928      	ldr	r1, [pc, #160]	@ (80007a4 <LCD_Init+0xe0>)
 8000702:	4829      	ldr	r0, [pc, #164]	@ (80007a8 <LCD_Init+0xe4>)
 8000704:	f000 f97e 	bl	8000a04 <MCAL_GPIO_Init>

	//EN switch
	PinCnfg.GPIO_Pin_Num = EN_Switch;
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <LCD_Init+0xe0>)
 800070a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800070e:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <LCD_Init+0xe0>)
 8000712:	2204      	movs	r2, #4
 8000714:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <LCD_Init+0xe0>)
 8000718:	2201      	movs	r2, #1
 800071a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinCnfg);
 800071c:	4921      	ldr	r1, [pc, #132]	@ (80007a4 <LCD_Init+0xe0>)
 800071e:	4822      	ldr	r0, [pc, #136]	@ (80007a8 <LCD_Init+0xe4>)
 8000720:	f000 f970 	bl	8000a04 <MCAL_GPIO_Init>

	//	To make pins output with speed 10 MHz
	for(int i = GPIO_Pin_0; i<GPIO_Pin_7 ; i++)
 8000724:	2301      	movs	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e012      	b.n	8000750 <LCD_Init+0x8c>
	{
		PinCnfg.GPIO_Pin_Num = GPIO_Pins_Array[i];
 800072a:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <LCD_Init+0xe8>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <LCD_Init+0xe0>)
 8000734:	801a      	strh	r2, [r3, #0]
		PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000736:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <LCD_Init+0xe0>)
 8000738:	2204      	movs	r2, #4
 800073a:	709a      	strb	r2, [r3, #2]
		PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <LCD_Init+0xe0>)
 800073e:	2201      	movs	r2, #1
 8000740:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_PORT, &PinCnfg);
 8000742:	4918      	ldr	r1, [pc, #96]	@ (80007a4 <LCD_Init+0xe0>)
 8000744:	4818      	ldr	r0, [pc, #96]	@ (80007a8 <LCD_Init+0xe4>)
 8000746:	f000 f95d 	bl	8000a04 <MCAL_GPIO_Init>
	for(int i = GPIO_Pin_0; i<GPIO_Pin_7 ; i++)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b7f      	cmp	r3, #127	@ 0x7f
 8000754:	dde9      	ble.n	800072a <LCD_Init+0x66>
	}


	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_Pin_Reset);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <LCD_Init+0xe4>)
 800075e:	f000 f9e7 	bl	8000b30 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_Pin_Reset);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000768:	480f      	ldr	r0, [pc, #60]	@ (80007a8 <LCD_Init+0xe4>)
 800076a:	f000 f9e1 	bl	8000b30 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_Pin_Reset);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000774:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <LCD_Init+0xe4>)
 8000776:	f000 f9db 	bl	8000b30 <MCAL_GPIO_WritePin>


	my_wait(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff3c 	bl	80005f8 <my_wait>
	//	LCD_Is_Busy();
	LCD_Clear_Screen();
 8000780:	f7ff ff98 	bl	80006b4 <LCD_Clear_Screen>

	//#ifdef EIGHT_BIT_MODE
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 8000784:	2038      	movs	r0, #56	@ 0x38
 8000786:	f000 f813 	bl	80007b0 <LCD_Write_Command>
	//	//A command needed for using 4 bit mode
	//	LCD_Write_Command(0x02);
	//	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	//#endif

	LCD_Write_Command(LCD_ENTRY_MODE);
 800078a:	2006      	movs	r0, #6
 800078c:	f000 f810 	bl	80007b0 <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000790:	2080      	movs	r0, #128	@ 0x80
 8000792:	f000 f80d 	bl	80007b0 <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f80a 	bl	80007b0 <LCD_Write_Command>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000004c 	.word	0x2000004c
 80007a8:	40010800 	.word	0x40010800
 80007ac:	20000020 	.word	0x20000020

080007b0 <LCD_Write_Command>:


void LCD_Write_Command(unsigned char command)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	//	LCD_Is_Busy();

	//#ifdef EIGHT_BIT_MODE
	//	LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_PORT, command);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <LCD_Write_Command+0x40>)
 80007c2:	f000 f9cc 	bl	8000b5e <MCAL_GPIO_WritePort>

	//	LCD_Ctrl &= ~((1<<RW_Switch) | (1<<RS_Switch));
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_Pin_Reset);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <LCD_Write_Command+0x40>)
 80007ce:	f000 f9af 	bl	8000b30 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_Pin_Reset);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <LCD_Write_Command+0x40>)
 80007da:	f000 f9a9 	bl	8000b30 <MCAL_GPIO_WritePin>

	my_wait(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff0a 	bl	80005f8 <my_wait>
	LCD_En_Kick();
 80007e4:	f7ff ff26 	bl	8000634 <LCD_En_Kick>
	//	LCD_PORT = ((LCD_PORT & 0x0F) | (command << 4));
	//	LCD_Ctrl &= ~((1<<RW_Switch) | (1<<RS_Switch));
	//	my_wait(1);
	//	LCD_En_Kick();
	//#endif
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40010800 	.word	0x40010800

080007f4 <LCD_Write_Char>:

void LCD_Write_Char(unsigned char data)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	//LCD_Is_Busy();

	//#ifdef EIGHT_BIT_MODE
	//	LCD_PORT = data;
	MCAL_GPIO_WritePort(LCD_PORT, data);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	b29b      	uxth	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <LCD_Write_Char+0x40>)
 8000806:	f000 f9aa 	bl	8000b5e <MCAL_GPIO_WritePort>

	//	LCD_Ctrl &= ~(1<<RW_Switch);
	//	LCD_Ctrl |= (1<<RS_Switch);
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_Pin_Reset);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <LCD_Write_Char+0x40>)
 8000812:	f000 f98d 	bl	8000b30 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_Pin_Set);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <LCD_Write_Char+0x40>)
 800081e:	f000 f987 	bl	8000b30 <MCAL_GPIO_WritePin>

	my_wait(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fee8 	bl	80005f8 <my_wait>
	LCD_En_Kick();
 8000828:	f7ff ff04 	bl	8000634 <LCD_En_Kick>
	//	LCD_Ctrl |= (1<<RS_Switch);
	//	LCD_Ctrl &= ~(1<<RW_Switch);
	//	my_wait(1);
	//	LCD_En_Kick();
	//#endif
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40010800 	.word	0x40010800

08000838 <LCD_Write_String>:


void LCD_Write_String(char* data)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 8000844:	e01c      	b.n	8000880 <LCD_Write_String+0x48>
	{
		count++;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
		LCD_Write_Char(*data++);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffcd 	bl	80007f4 <LCD_Write_Char>
		if(count == 16)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b10      	cmp	r3, #16
 800085e:	d104      	bne.n	800086a <LCD_Write_String+0x32>
		{
			LCD_GOTO_XY(2 , 0);
 8000860:	2100      	movs	r1, #0
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff fefc 	bl	8000660 <LCD_GOTO_XY>
 8000868:	e00a      	b.n	8000880 <LCD_Write_String+0x48>
		}
		else if(count == 32)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b20      	cmp	r3, #32
 800086e:	d107      	bne.n	8000880 <LCD_Write_String+0x48>
		{
			LCD_Clear_Screen();
 8000870:	f7ff ff20 	bl	80006b4 <LCD_Clear_Screen>
			LCD_GOTO_XY(1,0);
 8000874:	2100      	movs	r1, #0
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef2 	bl	8000660 <LCD_GOTO_XY>
			count = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1de      	bne.n	8000846 <LCD_Write_String+0xe>
		}
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_drivers.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80008a4:	f000 80a5 	beq.w	80009f2 <Get_CRLH_Position+0x15e>
 80008a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80008ac:	f300 80a3 	bgt.w	80009f6 <Get_CRLH_Position+0x162>
 80008b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008b4:	f000 809b 	beq.w	80009ee <Get_CRLH_Position+0x15a>
 80008b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008bc:	f300 809b 	bgt.w	80009f6 <Get_CRLH_Position+0x162>
 80008c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008c4:	f000 8091 	beq.w	80009ea <Get_CRLH_Position+0x156>
 80008c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008cc:	f300 8093 	bgt.w	80009f6 <Get_CRLH_Position+0x162>
 80008d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008d4:	f000 8087 	beq.w	80009e6 <Get_CRLH_Position+0x152>
 80008d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008dc:	f300 808b 	bgt.w	80009f6 <Get_CRLH_Position+0x162>
 80008e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008e4:	d07d      	beq.n	80009e2 <Get_CRLH_Position+0x14e>
 80008e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008ea:	f300 8084 	bgt.w	80009f6 <Get_CRLH_Position+0x162>
 80008ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008f2:	d074      	beq.n	80009de <Get_CRLH_Position+0x14a>
 80008f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008f8:	dc7d      	bgt.n	80009f6 <Get_CRLH_Position+0x162>
 80008fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008fe:	d06c      	beq.n	80009da <Get_CRLH_Position+0x146>
 8000900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000904:	dc77      	bgt.n	80009f6 <Get_CRLH_Position+0x162>
 8000906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800090a:	d064      	beq.n	80009d6 <Get_CRLH_Position+0x142>
 800090c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000910:	dc71      	bgt.n	80009f6 <Get_CRLH_Position+0x162>
 8000912:	2b80      	cmp	r3, #128	@ 0x80
 8000914:	d05d      	beq.n	80009d2 <Get_CRLH_Position+0x13e>
 8000916:	2b80      	cmp	r3, #128	@ 0x80
 8000918:	dc6d      	bgt.n	80009f6 <Get_CRLH_Position+0x162>
 800091a:	2b20      	cmp	r3, #32
 800091c:	dc48      	bgt.n	80009b0 <Get_CRLH_Position+0x11c>
 800091e:	2b00      	cmp	r3, #0
 8000920:	dd69      	ble.n	80009f6 <Get_CRLH_Position+0x162>
 8000922:	3b01      	subs	r3, #1
 8000924:	2b1f      	cmp	r3, #31
 8000926:	d866      	bhi.n	80009f6 <Get_CRLH_Position+0x162>
 8000928:	a201      	add	r2, pc, #4	@ (adr r2, 8000930 <Get_CRLH_Position+0x9c>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	080009b7 	.word	0x080009b7
 8000934:	080009bb 	.word	0x080009bb
 8000938:	080009f7 	.word	0x080009f7
 800093c:	080009bf 	.word	0x080009bf
 8000940:	080009f7 	.word	0x080009f7
 8000944:	080009f7 	.word	0x080009f7
 8000948:	080009f7 	.word	0x080009f7
 800094c:	080009c3 	.word	0x080009c3
 8000950:	080009f7 	.word	0x080009f7
 8000954:	080009f7 	.word	0x080009f7
 8000958:	080009f7 	.word	0x080009f7
 800095c:	080009f7 	.word	0x080009f7
 8000960:	080009f7 	.word	0x080009f7
 8000964:	080009f7 	.word	0x080009f7
 8000968:	080009f7 	.word	0x080009f7
 800096c:	080009c7 	.word	0x080009c7
 8000970:	080009f7 	.word	0x080009f7
 8000974:	080009f7 	.word	0x080009f7
 8000978:	080009f7 	.word	0x080009f7
 800097c:	080009f7 	.word	0x080009f7
 8000980:	080009f7 	.word	0x080009f7
 8000984:	080009f7 	.word	0x080009f7
 8000988:	080009f7 	.word	0x080009f7
 800098c:	080009f7 	.word	0x080009f7
 8000990:	080009f7 	.word	0x080009f7
 8000994:	080009f7 	.word	0x080009f7
 8000998:	080009f7 	.word	0x080009f7
 800099c:	080009f7 	.word	0x080009f7
 80009a0:	080009f7 	.word	0x080009f7
 80009a4:	080009f7 	.word	0x080009f7
 80009a8:	080009f7 	.word	0x080009f7
 80009ac:	080009cb 	.word	0x080009cb
 80009b0:	2b40      	cmp	r3, #64	@ 0x40
 80009b2:	d00c      	beq.n	80009ce <Get_CRLH_Position+0x13a>
 80009b4:	e01f      	b.n	80009f6 <Get_CRLH_Position+0x162>
	{
	case GPIO_Pin_0 ://Because Pin 0 starts from bit 0
		return 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e01e      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_1 ://Because Pin 1 starts from bit 4
		return 4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	e01c      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_2 ://Because Pin 2 starts from bit 8
		return 8;
 80009be:	2308      	movs	r3, #8
 80009c0:	e01a      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_3 ://Because Pin 3 starts from bit 12
		return 12;
 80009c2:	230c      	movs	r3, #12
 80009c4:	e018      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_4 ://Because Pin 4 starts from bit 16
		return 16;
 80009c6:	2310      	movs	r3, #16
 80009c8:	e016      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_5 ://Because Pin 5 starts from bit 20
		return 20;
 80009ca:	2314      	movs	r3, #20
 80009cc:	e014      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_6 ://Because Pin 6 starts from bit 24
		return 24;
 80009ce:	2318      	movs	r3, #24
 80009d0:	e012      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_7 ://Because Pin 7 starts from bit 28
		return 28;
 80009d2:	231c      	movs	r3, #28
 80009d4:	e010      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_8 ://Because Pin 8 starts from bit 0
		return 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e00e      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_9 ://Because Pin 9 starts from bit 4
		return 4;
 80009da:	2304      	movs	r3, #4
 80009dc:	e00c      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_10 ://Because Pin 10 starts from bit 8
		return 8;
 80009de:	2308      	movs	r3, #8
 80009e0:	e00a      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_11 ://Because Pin 11 starts from bit 12
		return 12;
 80009e2:	230c      	movs	r3, #12
 80009e4:	e008      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_12 ://Because Pin 12 starts from bit 16
		return 16;
 80009e6:	2310      	movs	r3, #16
 80009e8:	e006      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_13 ://Because Pin 13 starts from bit 20
		return 20;
 80009ea:	2314      	movs	r3, #20
 80009ec:	e004      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_14 ://Because Pin 14 starts from bit 24
		return 24;
 80009ee:	2318      	movs	r3, #24
 80009f0:	e002      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_Pin_15 ://Because Pin 15 starts from bit 28
		return 28;
 80009f2:	231c      	movs	r3, #28
 80009f4:	e000      	b.n	80009f8 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MCAL_GPIO_Init>:
 * @returnval 	-None
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				But LQFP48 Package has only GPIO A,B,Part of C,D exported as external pins from the
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_Pin_Config_t* PinConfig)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure pins from (0->7)
	//Port configuration register High (GPIOx_CRH) configure pins from (8->15)
	volatile uint32_t* configRegister	= NULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_Pin_Num < GPIO_Pin_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	2bff      	cmp	r3, #255	@ 0xff
 8000a1c:	d801      	bhi.n	8000a22 <MCAL_GPIO_Init+0x1e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	e001      	b.n	8000a26 <MCAL_GPIO_Init+0x22>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3304      	adds	r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
	//Clear CNF8[1:0] MODE8[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff31 	bl	8000894 <Get_CRLH_Position>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	230f      	movs	r3, #15
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	401a      	ands	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	601a      	str	r2, [r3, #0]

	//If pin is Output
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_PP) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_PP))
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	789b      	ldrb	r3, [r3, #2]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d00b      	beq.n	8000a66 <MCAL_GPIO_Init+0x62>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	789b      	ldrb	r3, [r3, #2]
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d007      	beq.n	8000a66 <MCAL_GPIO_Init+0x62>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	d003      	beq.n	8000a66 <MCAL_GPIO_Init+0x62>
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	789b      	ldrb	r3, [r3, #2]
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d10e      	bne.n	8000a84 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF8[1:0] MODE8[1:0]
		Pin_Config = ( (((PinConfig->GPIO_Mode -4) << 2 | (PinConfig->GPIO_Output_Speed)) & 0x0f));//I did minus 4 because i defined the output from 4->7 and then shifted by 2 because Cnf is the upper 2 bits then anded by 0x0f cause i need only those 4 bits
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	789b      	ldrb	r3, [r3, #2]
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	b25a      	sxtb	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	78db      	ldrb	r3, [r3, #3]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f003 030f 	and.w	r3, r3, #15
 8000a80:	73fb      	strb	r3, [r7, #15]
 8000a82:	e02c      	b.n	8000ade <MCAL_GPIO_Init+0xda>
	}

	//If pin is input
	else //Input is 00 by default Mode = 00
	{
		if((PinConfig->GPIO_Mode == GPIO_Mode_Input_Flo) || (PinConfig->GPIO_Mode == GPIO_Mode_Analog))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <MCAL_GPIO_Init+0x90>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	789b      	ldrb	r3, [r3, #2]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d107      	bne.n	8000aa4 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNF8[1:0] MODE8[1:0]00
			Pin_Config = ( (((PinConfig->GPIO_Mode) << 2 | (0x0)) & 0x0f));//I did minus 4 because i defined the output from 4->7 and then shifted by 2 because Cnf is the upper 2 bits then anded by 0x0f causei need only those 4 bits
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e01c      	b.n	8000ade <MCAL_GPIO_Init+0xda>
			//				(*configRegister) |= ((Pin_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
		}
		else if(PinConfig->GPIO_Mode == GPIO_Mode_AF_Input)//Consider it as input floating
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d102      	bne.n	8000ab2 <MCAL_GPIO_Init+0xae>
		{
			//Set CNF8[1:0] MODE8[1:0]00
			Pin_Config = ( (((GPIO_Mode_Input_Flo) << 2 | (0x0)) & 0x0f));
 8000aac:	2304      	movs	r3, #4
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e015      	b.n	8000ade <MCAL_GPIO_Init+0xda>
			//				(*configRegister) |= ((Pin_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
		}
		else //PU PD Input
		{
			Pin_Config = ((((GPIO_Mode_Input_PU) << 2) | 0x0) &0x0f);
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_Mode == GPIO_Mode_Input_PU)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	789b      	ldrb	r3, [r3, #2]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d107      	bne.n	8000ace <MCAL_GPIO_Init+0xca>
			{
				//Table 20 Port bit configuration table PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_Pin_Num;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	e007      	b.n	8000ade <MCAL_GPIO_Init+0xda>
			}
			else//PD //Table 20 Port bit configuration table PxODR = 0
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_Pin_Num);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	8812      	ldrh	r2, [r2, #0]
 8000ad6:	43d2      	mvns	r2, r2
 8000ad8:	401a      	ands	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	(*configRegister) |= ((Pin_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
 8000ade:	7bfc      	ldrb	r4, [r7, #15]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fed5 	bl	8000894 <Get_CRLH_Position>
 8000aea:	4603      	mov	r3, r0
 8000aec:	fa04 f203 	lsl.w	r2, r4, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}

08000b02 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set pin number according @ref GPIO_Pins_define
 * @returnval 	-The input pin value (two values based on @ref GPIO_Pin_state)
 * Note			-None
 * */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	807b      	strh	r3, [r7, #2]
	uint8_t BitStatus;

	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_Pin_Reset) //Cast 3ashan bkrnno be 7aga uint32_t
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <MCAL_GPIO_ReadPin+0x1e>
	{
		BitStatus = GPIO_Pin_Set;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
 8000b1e:	e001      	b.n	8000b24 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		BitStatus = GPIO_Pin_Reset;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
	}
	return BitStatus;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: pin value
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t Value)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_Pin_Reset)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <MCAL_GPIO_WritePin+0x1e>
		//OR
		//		BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bi
		GPIOx->BSRR = PinNumber;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = PinNumber;
	}
}
 8000b4c:	e002      	b.n	8000b54 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	615a      	str	r2, [r3, #20]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <MCAL_GPIO_WritePort>:
 * @param [in] 	-GPIOx: x(A...E)
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx , uint16_t Value)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
	...

08000b7c <__libc_init_array>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	2600      	movs	r6, #0
 8000b80:	4d0c      	ldr	r5, [pc, #48]	@ (8000bb4 <__libc_init_array+0x38>)
 8000b82:	4c0d      	ldr	r4, [pc, #52]	@ (8000bb8 <__libc_init_array+0x3c>)
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	10a4      	asrs	r4, r4, #2
 8000b88:	42a6      	cmp	r6, r4
 8000b8a:	d109      	bne.n	8000ba0 <__libc_init_array+0x24>
 8000b8c:	f000 f81a 	bl	8000bc4 <_init>
 8000b90:	2600      	movs	r6, #0
 8000b92:	4d0a      	ldr	r5, [pc, #40]	@ (8000bbc <__libc_init_array+0x40>)
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <__libc_init_array+0x44>)
 8000b96:	1b64      	subs	r4, r4, r5
 8000b98:	10a4      	asrs	r4, r4, #2
 8000b9a:	42a6      	cmp	r6, r4
 8000b9c:	d105      	bne.n	8000baa <__libc_init_array+0x2e>
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba4:	4798      	blx	r3
 8000ba6:	3601      	adds	r6, #1
 8000ba8:	e7ee      	b.n	8000b88 <__libc_init_array+0xc>
 8000baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bae:	4798      	blx	r3
 8000bb0:	3601      	adds	r6, #1
 8000bb2:	e7f2      	b.n	8000b9a <__libc_init_array+0x1e>
 8000bb4:	08000c14 	.word	0x08000c14
 8000bb8:	08000c14 	.word	0x08000c14
 8000bbc:	08000c14 	.word	0x08000c14
 8000bc0:	08000c18 	.word	0x08000c18

08000bc4 <_init>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr

08000bd0 <_fini>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr
