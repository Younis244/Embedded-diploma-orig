/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



#include "stm32f103x6.h"
#include "Stm32_F103C6_gpio_drivers.h"


void clock_init()
{
	//Enable clock GPIOA
	//RCC_ABP2ENR |=RCC_IOPAEN; //Keda 3mlna enable lel clock ely d5lla lel RCC
	RCC_GPIOA_Clk_En();

	//Enable clock GPIOB
	//RCC_ABP2ENR |=RCC_IOPBEN;
	RCC_GPIOB_Clk_En();
}

void GPIO_init()
{
//	GPIOA_CRL = 0x0;
//	GPIOB_CRL = 0x0;
//	GPIOA_CRH = 0x0;
//	GPIOB_CRH = 0x0;

	GPIO_Pin_Config_t PinCfg;

	//GPIOA
	//PA1--> Input High Z(impedance)
	GPIOA_CRL |= (1<<6);
	PinCfg.GPIO_Pin_Num = GPIO_Pin_1;
	PinCfg.GPIO_Mode = GPIO_Mode_Input_Flo;
	MCAL_GPIO_Init(GPIOA, &PinCfg);

	//PA13--> Input High Z(impedance)
	GPIOA_CRH |= (1<<22);

	//GPIOB
	//PB1--> Output push-pull mode
	GPIOB_CRL |= (1<<4);
	//PB13 --> Output push-pull mode
	GPIOB_CRH |= (1<<20);

}

void my_wait(int x)
{
	unsigned int i,j;
	for(i=0; i<x ; i++)
	{
		for(j=0; j<255 ; j++)
		{

		}
	}
}

int main(void)
{
	clock_init();
	GPIO_init();


	while(1)
	{
		//PA1-->connected to PB1 (Pull up resistance)
		if(((GPIOA_IDR & (1<<1)) >>1 ) == 0) //press
		{
			GPIOB_ODR ^= (1<<1);
			while((((GPIOA_IDR & (1<<1)) >>1 ) == 0));; //Single press
		}

		//PA13-->connected to PB13 (Pull down resistance)
		if(((GPIOA_IDR & (1<<13)) >>13 ) == 1) //press
		{
			GPIOB_ODR ^= (1<<13);
			//No while as it is multi pressing
		}

		my_wait(1);
	}

}

