/*
 * Stm32_F103C6_gpio_drivers.c
 *
 *  Created on: Sep 11, 2024
 *      Author: Younis Tamer
 */



#include "Stm32_F103C6_gpio_drivers.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
	switch (PinNumber)
	{
	case GPIO_Pin_0 ://Because Pin 0 starts from bit 0
		return 0;
		break;
	case GPIO_Pin_1 ://Because Pin 1 starts from bit 4
		return 4;
		break;
	case GPIO_Pin_2 ://Because Pin 2 starts from bit 8
		return 8;
		break;
	case GPIO_Pin_3 ://Because Pin 3 starts from bit 12
		return 12;
		break;
	case GPIO_Pin_4 ://Because Pin 4 starts from bit 16
		return 16;
		break;
	case GPIO_Pin_5 ://Because Pin 5 starts from bit 20
		return 20;
		break;
	case GPIO_Pin_6 ://Because Pin 6 starts from bit 24
		return 24;
		break;
	case GPIO_Pin_7 ://Because Pin 7 starts from bit 28
		return 28;
		break;
	case GPIO_Pin_8 ://Because Pin 8 starts from bit 0
		return 0;
		break;
	case GPIO_Pin_9 ://Because Pin 9 starts from bit 4
		return 4;
		break;
	case GPIO_Pin_10 ://Because Pin 10 starts from bit 8
		return 8;
		break;
	case GPIO_Pin_11 ://Because Pin 11 starts from bit 12
		return 12;
		break;
	case GPIO_Pin_12 ://Because Pin 12 starts from bit 16
		return 16;
		break;
	case GPIO_Pin_13 ://Because Pin 13 starts from bit 20
		return 20;
		break;
	case GPIO_Pin_14 ://Because Pin 14 starts from bit 24
		return 24;
		break;
	case GPIO_Pin_15 ://Because Pin 15 starts from bit 28
		return 28;
		break;
	}
	return 0;
}



/**================================================================
 * @Fn			-MCAL_GPIO_Init
 * @brief 		-Initializes the GPIOx Piny peripheral according to the specified parametrs in PinConfig
 * @param [in] 	-GPIOx: x(A...E)
 * @param [in] 	-PinConfig ptr to GPIO_Pin_Config_t struct that contains the configuration info for the specified GPIO peripheral
 * @returnval 	-None
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				But LQFP48 Package has only GPIO A,B,Part of C,D exported as external pins from the
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_Pin_Config_t* PinConfig)
{
	//Port configuration register low (GPIOx_CRL) configure pins from (0->7)
	//Port configuration register High (GPIOx_CRH) configure pins from (8->15)
	volatile uint32_t* configRegister	= NULL;
	uint8_t Pin_Config = 0;

	configRegister = (PinConfig->GPIO_Pin_Num < GPIO_Pin_8)? &GPIOx->CRL: &GPIOx->CRH;
	//Clear CNF8[1:0] MODE8[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));

	//If pin is Output
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_PP) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_PP))
	{
		//Set CNF8[1:0] MODE8[1:0]
		Pin_Config = ( (((PinConfig->GPIO_Mode -4) << 2 | (PinConfig->GPIO_Output_Speed)) & 0x0f));//I did minus 4 because i defined the output from 4->7 and then shifted by 2 because Cnf is the upper 2 bits then anded by 0x0f causei need only those 4 bits
//		(*configRegister) |= ((Pin_Config << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
	}

	//If pin is input
	else //Input is 00 by default Mode = 00
	{
		if((PinConfig->GPIO_Mode == GPIO_Mode_Input_Flo) || (PinConfig->GPIO_Mode == GPIO_Mode_Analog))
			{
				//Set CNF8[1:0] MODE8[1:0]00
				Pin_Config = ( (((PinConfig->GPIO_Mode) << 2 | (0x0)) & 0x0f));//I did minus 4 because i defined the output from 4->7 and then shifted by 2 because Cnf is the upper 2 bits then anded by 0x0f causei need only those 4 bits
//				(*configRegister) |= ((Pin_Config << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
			}
		else if(PinConfig->GPIO_Mode == GPIO_Mode_AF_Input)//Consider it as input floating
			{
				//Set CNF8[1:0] MODE8[1:0]00
				Pin_Config = ( (((GPIO_Mode_Input_Flo) << 2 | (0x0)) & 0x0f));
//				(*configRegister) |= ((Pin_Config << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
			}
		else //PU PD Input
		{
			Pin_Config = ((((GPIO_Mode_Input_PU) << 2) | 0x0) &0x0f);
		}
	}
	(*configRegister) |= ((Pin_Config << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
}

/**================================================================
 * @Fn			-MCAL_GPIO_DeInit
 * @brief 		-Reset all the GPIO Registers
 * @param [in] 	-GPIOx: x(A...E)
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_DeInit(GPIO_TypeDef* GPIOx)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_ReadPin
 * @brief 		-Read Specifi Pin
 * @param [in] 	-GPIOx: x(A...E)
 * @param [in] 	-PinNumber: Set pin number according @ref GPIO_Pins_define
 * @returnval 	-The input pin value (two values based on @ref GPIO_Pin_state)
 * Note			-None
 * */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_ReadPort
 * @brief 		-Read Specific input Port value
 * @param [in] 	-GPIOx: x(A...E)
 * @returnval 	-The input Port value
 * Note			-None
 * */
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef* GPIOx)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_WritePin
 * @brief 		-Write Specific input Port value
 * @param [in] 	-GPIOx: x(A...E)
 * @param [in] 	-PinNumber: From 0->15 Specifies the port bit to read. set by @ref GPIO_Pins_define
 * @param [in] 	-Value: pin value
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t Value)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_WritePort
 * @brief 		-Write on Output port
 * @param [in] 	-GPIOx: x(A...E)
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx , uint16_t Value)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_TogglePin
 * @brief 		-Toggle bit on specific pin
 * @param [in] 	-GPIOx: x(A...E)
 * @param [in] 	-PinNumber: Specifies the port bit to read. set by @ref GPIO_Pins_define
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_LockPin
 * @brief 		-The locking mechanism allows the IO configuration to be frozen
 * @param [in] 	-GPIOx: x(A...E)
 * @param [in] 	-PinNumber: Specifies the port bit to read. set by @ref GPIO_Pins_define
 * @returnval 	-OK if pin config is locked or ERROR if pin is not locked (Ok & ERROR are defined @ ref GPIO_Return_Lock)
 * Note			-None
 * */
uint8_t MCAL_GPIO_LockPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{

}









