/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

typedef volatile unsigned int vuint32_t;
#include <stdint.h>
//register address
//RCC
#define RCC_BASE 	0x40021000
#define RCC_ABP2ENR *(volatile uint32_t *) (RCC_BASE   + 0x18)
#define RCC_IOPAEN (1<<2)

//GPIO
#define GPIOA_BASE  0x40010800
#define GPIOA_CRH 	*(volatile uint32_t *) (GPIOA_BASE + 0x04)
#define GPIOA_ODR 	*(volatile uint32_t *) (GPIOA_BASE + 0x0C)
#define GPIOA_IDR 	*(volatile uint32_t *) (GPIOA_BASE + 0x08)
#define GPIOA_CRL 	*(volatile uint32_t *) (GPIOA_BASE + 0x00)
#define GPIOA13	   	(1UL<<13)

#define GPIOB_BASE  0x40010C00
#define GPIOB_CRH 	*(volatile uint32_t *) (GPIOB_BASE + 0x04)
#define GPIOB_ODR 	*(volatile uint32_t *) (GPIOB_BASE + 0x0C)
#define GPIOB_CRL 	*(volatile uint32_t *) (GPIOB_BASE + 0x00)
#define GPIOB_IDR 	*(volatile uint32_t *) (GPIOB_BASE + 0x08)

void clock_init()
{
	RCC_ABP2ENR |=RCC_IOPAEN; //Keda 3mlna enable lel clock ely d5lla lel RCC

	//	Bit 0 AFIOEN: Alternate function I/O clock enable
	//	Set and cleared by software.
	//	0: Alternate Function I/O clock disabled
	//	1:Alternate Function I/O clock enabled
	RCC_ABP2ENR |= (1<<0);
}

void GPIO_init()
{
	GPIOA_CRH 	&=0xFF0FFFFF; //Ana keda sfrrt el pins been 20 w 24 (20-->23)
	GPIOA_CRH 	|=0x00200000; //Ana ba3d ma sfrt.hom 3awez a7ott 3alehom 2 ba2a
	//Tab leh ma7tetsh mn el awal?
	//Allk la ma efred kan ma7toott fe el pins 1's so ama ont ha3mell OR ma3 2 fa kan el result hateb2a 1111 wana 3awezha 0010

	//PIN A 0 input floating 01: Floating input (reset state)
	GPIOA_CRL |= (1<<2);
}

int main(void)
{
	clock_init();
	GPIO_init();


	while(1)
		{

		}

}

