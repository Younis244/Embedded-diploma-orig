/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

typedef volatile unsigned int vuint32_t;
#include <stdint.h>
//register address
//RCC
#define RCC_BASE 	0x40021000
#define RCC_ABP2ENR *(volatile uint32_t *) (RCC_BASE   + 0x18)
#define RCC_IOPAEN (1<<2)
#define RCC_IOPBEN (1<<3)
//GPIO
#define GPIOA_BASE  0x40010800
#define GPIOA_CRH 	*(volatile uint32_t *) (GPIOA_BASE + 0x04)
#define GPIOA_ODR 	*(volatile uint32_t *) (GPIOA_BASE + 0x0C)
#define GPIOA_IDR 	*(volatile uint32_t *) (GPIOA_BASE + 0x08)
#define GPIOA_CRL 	*(volatile uint32_t *) (GPIOA_BASE + 0x00)
#define GPIOA13	   	(1UL<<13)

#define GPIOB_BASE  0x40010C00
#define GPIOB_CRH 	*(volatile uint32_t *) (GPIOB_BASE + 0x04)
#define GPIOB_ODR 	*(volatile uint32_t *) (GPIOB_BASE + 0x0C)
#define GPIOB_CRL 	*(volatile uint32_t *) (GPIOB_BASE + 0x00)
#define GPIOB_IDR 	*(volatile uint32_t *) (GPIOB_BASE + 0x08)

void clock_init()
{
	//Enable clock GPIOA
	RCC_ABP2ENR |=RCC_IOPAEN; //Keda 3mlna enable lel clock ely d5lla lel RCC

	//Enable clock GPIOB
	RCC_ABP2ENR |=RCC_IOPBEN;
}

void GPIO_init()
{
	GPIOA_CRL = 0x0;
	GPIOB_CRL = 0x0;
	GPIOA_CRH = 0x0;
	GPIOB_CRH = 0x0;

	//GPIOA
	//PA1--> Input High Z(impedance)
	GPIOA_CRL |= (1<<6);

	//PA13--> Input High Z(impedance)
	GPIOA_CRH |= (1<<22);

	//GPIOB
	//PB1--> Output push-pull mode
	GPIOB_CRL |= (1<<4);
	//PB13 --> Output push-pull mode
	GPIOB_CRH |= (1<<20);

}

int main(void)
{
	clock_init();
	GPIO_init();


	while(1)
	{
		//PA1-->connected to PB1 (Pull up resistance)
		if((GPIOA_IDR & (1<<1)) >>1 )
	}

}

