
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088f  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000397  00000000  00000000  00001177  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  00001952  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_En_Kick>:
#include "LCD.h"

//DONE
void LCD_En_Kick()
{
	LCD_Ctrl &= ~(1<<EN_Switch);
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	87 7f       	andi	r24, 0xF7	; 247
  70:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	83 ed       	ldi	r24, 0xD3	; 211
  74:	90 e3       	ldi	r25, 0x30	; 48
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <LCD_En_Kick+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <LCD_En_Kick+0x10>
  7c:	00 00       	nop
	_delay_ms(50);
	LCD_Ctrl |= (1<<EN_Switch);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	88 60       	ori	r24, 0x08	; 8
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <LCD_Write_Command>:
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
}

//DONE
LCD_Write_Command(unsigned char command)
{
  86:	cf 93       	push	r28
  88:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Is_Busy();
  8a:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Is_Busy>
	LCD_PORT = command;
  8e:	cb bb       	out	0x1b, r28	; 27
	LCD_Ctrl &= ~((1<<RW_Switch) | (1<<RS_Switch));
  90:	88 b3       	in	r24, 0x18	; 24
  92:	89 7f       	andi	r24, 0xF9	; 249
  94:	88 bb       	out	0x18, r24	; 24
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Write_Command+0x14>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Write_Command+0x1a>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_En_Kick();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_En_Kick>
	#endif
}
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <LCD_Clear_Screen>:
}

//DONE
void LCD_Clear_Screen()
{
	LCD_Write_Command(LCD_CLEAR_SCREEN);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 43 00 	call	0x86	; 0x86 <LCD_Write_Command>
  b0:	08 95       	ret

000000b2 <LCD_Is_Busy>:
}

//DONE
void LCD_Is_Busy(void)
{
	DataDirection_LCD_PORT = 0x00;//To make it input
  b2:	1a ba       	out	0x1a, r1	; 26
	LCD_Ctrl |= (1<<RW_Switch); //Read mode
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	88 bb       	out	0x18, r24	; 24
	LCD_Ctrl &= ~(1<<RS_Switch); //RS off
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	88 bb       	out	0x18, r24	; 24
	LCD_En_Kick();
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_En_Kick>
	DataDirection_LCD_PORT = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	LCD_Ctrl &= ~(1<<RW_Switch);
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	88 bb       	out	0x18, r24	; 24
	LCD_Clear_Screen();
  ce:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_Clear_Screen>
  d2:	08 95       	ret

000000d4 <LCD_Init>:
  d4:	87 e8       	ldi	r24, 0x87	; 135
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Init+0x4>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Init+0xa>
  de:	00 00       	nop
//DONE
void LCD_Init(void)
{
	_delay_ms(20);
	#ifdef EIGHT_BIT_MODE
	LCD_Is_Busy();
  e0:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Is_Busy>
	DataDirection_LCD_Ctrl |= ((1<<EN_Switch) | (1<<RW_Switch) | (1<<RS_Switch));
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	8e 60       	ori	r24, 0x0E	; 14
  e8:	87 bb       	out	0x17, r24	; 23
	LCD_Ctrl &= ~((1<<EN_Switch) | (1<<RW_Switch) | (1<<RS_Switch));
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	81 7f       	andi	r24, 0xF1	; 241
  ee:	88 bb       	out	0x18, r24	; 24
	DataDirection_LCD_PORT = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	LCD_Clear_Screen();
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_Clear_Screen>
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	0e 94 43 00 	call	0x86	; 0x86 <LCD_Write_Command>

	#ifdef Four_Bit_Mode
	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif

	LCD_Write_Command(LCD_ENTRY_MODE);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 43 00 	call	0x86	; 0x86 <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	0e 94 43 00 	call	0x86	; 0x86 <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	0e 94 43 00 	call	0x86	; 0x86 <LCD_Write_Command>
 110:	08 95       	ret

00000112 <LCD_Write_Char>:
	#endif
}

//DONE
void LCD_Write_Char(unsigned char data)
{
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_Is_Busy();
 116:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Is_Busy>
	LCD_PORT = data;
 11a:	cb bb       	out	0x1b, r28	; 27
	LCD_Ctrl &= ~(1<<RW_Switch);
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	88 bb       	out	0x18, r24	; 24
	LCD_Ctrl |= (1<<RS_Switch);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	82 60       	ori	r24, 0x02	; 2
 126:	88 bb       	out	0x18, r24	; 24
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Write_Char+0x1a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Write_Char+0x20>
 132:	00 00       	nop
	_delay_ms(1);
	LCD_En_Kick();
 134:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_En_Kick>
	#endif
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <main>:



int main(void)
{
	LCD_Init();
 13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_Init>
	LCD_Write_Char('A');
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Write_Char>
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0xa>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
