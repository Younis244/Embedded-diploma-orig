
Unit6_Lesson3_asingment_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cc  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000314  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_2>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT_init>:
#define INT_SREG		*(volatile unsigned char*)(BASE + 0x3F) 

INT_init()
{
	//making portD->pin5,6,7 as an output
	Set_bit(DDRD,5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	Set_bit(DDRD,6);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
	Set_bit(DDRD,7);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	81 bb       	out	0x11, r24	; 17
	
	//making port D 2,3 input
	Clear_bit(DDRD,2);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	81 bb       	out	0x11, r24	; 17
	Clear_bit(DDRD,3);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	81 bb       	out	0x11, r24	; 17
	
	/*bit(3,2)--> 11 --> rising edge in INT1
	  bit(1,0)--> 01 --> Any logical change INT0*/
	Set_bit(MCUCR,0);
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	85 bf       	out	0x35, r24	; 53
	Clear_bit(MCUCR,1);
  90:	85 b7       	in	r24, 0x35	; 53
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	85 bf       	out	0x35, r24	; 53
	Set_bit(MCUCR,2);
  96:	85 b7       	in	r24, 0x35	; 53
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	85 bf       	out	0x35, r24	; 53
	Set_bit(MCUCR,3);
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	85 bf       	out	0x35, r24	; 53
	
	//If ISC2 is written to zero, a falling edge on INT2 activates the interrupt.
	Clear_bit(INT_MCUCSR,6);
  a2:	84 b7       	in	r24, 0x34	; 52
  a4:	8f 7b       	andi	r24, 0xBF	; 191
  a6:	84 bf       	out	0x34, r24	; 52
	
	//General INT control register enabling INT0,1,2
	Set_bit(INT_GICR,5);
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8b bf       	out	0x3b, r24	; 59
	Set_bit(INT_GICR,6);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8b bf       	out	0x3b, r24	; 59
	Set_bit(INT_GICR,7);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8b bf       	out	0x3b, r24	; 59
	
	//Enable all interupts
	Set_bit(INT_SREG,7);
  ba:	8f b7       	in	r24, 0x3f	; 63
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8f bf       	out	0x3f, r24	; 63
		 
}
  c0:	08 95       	ret

000000c2 <main>:



int main(void)
{
	INT_init();
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <INT_init>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x4>

000000c8 <__vector_1>:
    /* Replace with your application code */
    while (1);
}

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	//making portD->pin2 as an input
	Set_bit(PORT_D,5);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <__vector_1+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_1+0x26>
  ee:	00 00       	nop
	_delay_ms(100) ;
	Clear_bit(PORT_D,5);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	82 bb       	out	0x12, r24	; 18
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_2>:

ISR(INT1_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	//making portD->pin3 as an input
	Set_bit(PORT_D,6);
 116:	82 b3       	in	r24, 0x12	; 18
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	98 e1       	ldi	r25, 0x18	; 24
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_2+0x1c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_2+0x26>
 12c:	00 00       	nop
	_delay_ms(100) ;
	Clear_bit(PORT_D,6);
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	82 bb       	out	0x12, r24	; 18
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_3>:

ISR(INT2_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
	//making portB->pin2 as an input
	Set_bit(PORT_D,7);
 154:	82 b3       	in	r24, 0x12	; 18
 156:	80 68       	ori	r24, 0x80	; 128
 158:	82 bb       	out	0x12, r24	; 18
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 e6       	ldi	r24, 0x69	; 105
 15e:	98 e1       	ldi	r25, 0x18	; 24
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <__vector_3+0x1c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <__vector_3+0x26>
 16a:	00 00       	nop
	_delay_ms(100) ;
	Clear_bit(PORT_D,7);
 16c:	82 b3       	in	r24, 0x12	; 18
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	82 bb       	out	0x12, r24	; 18
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
